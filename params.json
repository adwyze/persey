{"name":"Persey","tagline":"Persey help you easily manage the configuration, depending on the environment. ","body":"# Persey [![Build Status](https://travis-ci.org/zzet/persey.png?branch=master)](https://travis-ci.org/zzet/persey) [![Gem Version](https://badge.fury.io/rb/persey.png)](http://badge.fury.io/rb/persey) [![Dependency Status](https://gemnasium.com/zzet/persey.png)](https://gemnasium.com/zzet/persey) [![Code Climate](https://codeclimate.com/github/zzet/persey.png)](https://codeclimate.com/github/zzet/persey) [![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/zzet/persey/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n\r\n## Summary\r\n\r\nPersey help you easily manage the configuration, depending on the environment. \r\nThe main objective is to provide opportunities to reuse the\r\nconfiguration provided by the project, as the default configuration.\r\n\r\n## Problem\r\n\r\nFor the occurrence of the gem was a few prerequisites.\r\n\r\n * Work on opensource projects that support the relevance of problem configurations, changing the appearance of new versions and functionality. \r\n * Use in the project configuration, diversity in different files, and the inability to unite all in one configuration \r\n * Desire to use sensitive data as easily as those that can be safely stored in the repository.\r\n * Sometimes configuration happens in a variety of formats: yaml, json, ini \r\n\r\nI do not want to engage in writing parsers, I want to work fine :) \r\n\r\nThis solution allows to **accumulate** different configs in one, with the **possibility of reusability** of configuration options and **simple override**. It uses an **intuitive DSL**.\r\n\r\n## Installing\r\n\r\nAdd this to your `Gemfile`:\r\n\r\n``` ruby\r\ngem \"persey\", '>= 0.0.7'\r\n```\r\n\r\nGenerate default config file\r\n\r\n``` bash\r\n$ rails g persey:install\r\n```\r\n\r\n## Examples\r\n\r\n### Definition\r\n\r\n``` ruby\r\n# Rails.root are not initialized here\r\napp_path = File.expand_path('../../', __FILE__)\r\n\r\n# your redis config\r\nredis_config = File.join(app_path, 'config', 'redis.yml.example')\r\n\r\n# your project config\r\n# as example - it's default options from opensource\r\n# you don't want redeclare then with copy default file\r\nproject_config = File.join(app_path, 'config', 'project.yml.example')\r\n\r\n# some different environment specifed configuration options in separate config\r\nproject_env_config = File.join(app_path, 'config', \"project.#{Rails.env}.yml\")\r\n\r\n# config for awesome gem\r\nawesome_gem_config = File.join(app_path, 'config', 'awesome_gem_config.yml')\r\n\r\n# config with secret keys\r\n# you don't want store this config in repository and copy to secret folder on host machine\r\nmy_secret_key_config = '/home/user/secret/keys.yml'\r\n\r\n# We support not only YAML\r\n# Also JSON\r\nmy_node_js_config = '/rest/u/apps/node/config.json'\r\n# And TOML\r\nmy_berkshelf_config = File.join(app_path, 'provisioning', '.berkshelf')\r\n# And INI\r\nmy_ini_config = File.join(app_path, 'provisioning', 'php.ini') # lol\r\n\r\n# Persey.init ENV[\"environment\"] do # set current environment\r\nPersey.init Rails.env do # set current environment\r\n  sourse :yaml, redis_config,         :redis              # set specific namespace for settings (mount config in :redis key)\r\n  source :yaml, project_config                            # if project config and project_env_config have some options keys\r\n  source :yaml, project_env_config                        # last declared keys overwite before declared\r\n  source :yaml, awesome_gem_config,   :awesome_gem        # it's good to mount unknown configs to special :namespace\r\n  source :yaml, my_secret_key_config, :secret             # no comments. It's secret!\r\n  source :json, my_node_js_config,    :node_js_namespace\r\n  source :toml, my_berkshelf_config,  :berkshelf_namespace\r\n  source :ini,  my_ini_config,        :ini_namespace\r\n\r\n  env :production do\r\n    site_name 'Example'\r\n    web do\r\n      # domain   'example.com'   # domain described in project_env_config\r\n                                 # you can use them, or overwirite here\r\n      protocol 'https'           # we overwrite prolocol option here\r\n                                 # by default was 'http', but we need some little security\r\n      port      12345            # more, more security!\r\n      # and now we use configs for our options, which are not declared in any config\r\n      uri      -> { \"#{protocol}://#{domain}:#{port}\" }\r\n    end\r\n    \r\n    site_uri   -> { web.uri }    # we can re-re-use different options\r\n    \r\n    email do\r\n      pop do\r\n        address 'pop.example.com'\r\n        port    110\r\n      end\r\n      smtp do\r\n        address 'smtp.example.com'\r\n        port    25\r\n      end\r\n    end\r\n  end\r\n\r\n  env :development, :parent => :production do\r\n    web do\r\n      domain   'localhost'\r\n      protocol 'http'\r\n      port      9292\r\n    end\r\n    email do\r\n      smtp do\r\n        address 'smpt.text.example.com'\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\nIf you generate Persey config with run `rails g persey:install` in your `config/application.rb` were added strings to run config initialization. If you do not run installer, you can specify of run config manually. For example:\r\n\r\nin your `config/application.rb`\r\n\r\n``` ruby\r\n#...\r\n# We require gem here\r\nrequire \"persey\"\r\nrequire File.expand_path('../config', __FILE__)\r\n\r\nmodule AppName\r\n  # If you don't want use configs with call Persey.config\r\n  # you can do something like it:\r\n  def self.config\r\n    Persey.config\r\n  end\r\n  \r\n  class Application < Rails::Application\r\n    # ...\r\n  end\r\nend\r\n\r\n```\r\n\r\n### Usage\r\n\r\n``` ruby\r\nconfig = Persey.config\r\n\r\nconfig.site_name      # => 'Example'\r\nconfig.web.uri        # => 'https://example.com:80'\r\nconfig.site_uri       # => 'https://example.com:80'\r\nconfig.email.pop.port # => 110\r\n\r\nAppName.config.site_name # => 'Example'\r\n```\r\n\r\n### Rails\r\n\r\ndefine your config in `config/config.rb`\r\n\r\n``` ruby\r\nPersey.init Rails.env do\r\n  # settings\r\nend\r\n```\r\n\r\nreload\r\n\r\n``` ruby\r\n# config/environments/development.rb\r\nActionDispatch::Reloader.to_prepare do\r\n  load Rails.root.join('config/config.rb')\r\nend\r\n```\r\n\r\n## Supported config formats\r\n\r\n* YAML\r\n* JSON\r\n* TOML\r\n* INI\r\n\r\n## Similar\r\n\r\n* https://github.com/kaize/configus (this gem based on configus)\r\n* https://github.com/markbates/configatron\r\n* https://github.com/railsjedi/rails_config\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n6. Push to the branch (`git push origin my-new-feature`)\r\n7. Create new Pull Request\r\n\r\n## Another help\r\n\r\nYou can give me feedback with issue.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}